# modules/shell/zsh.nix --- https://www.zsh.org
#
# ZSH, Oh my dear and loved ZSH.

{ config, options, pkgs, lib, ... }:
with lib; {
  options.modules.shell.zsh = {
    enable = mkOption {
      type = types.bool;
      default = false;
    };

    historySize = mkOption {
      type = types.int;
      default = 9223372036854775807; # LONG_MAX: Unlimited
    };

    antigen = {
      enable = mkOption {
        type = types.bool;
        default = true;
      };
    };

    ohMyZsh = {
      enable = mkOption {
        type = types.bool;
        default = true;
      };
    };
  };

  config = mkIf config.modules.shell.zsh.enable {
    my = mkMerge [
      {
        packages = with pkgs; [
          zsh

          ## Theme
          starship # Spaceship prompt reimplemented in Rust

          ## Utils
          fzf      # fuzzy-finder all the things
          htop     # colorful top
          tldr     # short man util
          tree     # Tree view of dirs
          ripgrep  # Fancy fast grep
          stow     # GNU Stow, symlink manager
          jq       # JSON for shell
          neofetch # Fancy fetch
        ];

        # ZSH
        env.ZDOTDIR = "$XDG_CONFIG_HOME/zsh";
        env.ZSH_CACHE = "$XDG_CACHE_HOME/zsh";
        env.HISTFILE = "$XDG_CACHE_HOME/shell_history";

        # TODO: Change from dotfiles to NixOS (fetch from Git)
        # home.xdg.configFile."zsh" = {
        #   source = <config/zsh>;
        #   # Write it recursively so other modules can write files to it
        #   recursive = true;
        # };

        # Write variables down to ZSH files
        home.xdg.configFile = {
          "zsh/rc.zsh".text = let
            aliasLines =
              mapAttrsToList (n: v: ''alias ${n}="${v}"'') config.my.alias;
          in ''
            # WARNING: Content autogenerated, edits can be overwritten!
            ${concatStringsSep "\n" aliasLines}
            ${config.my.zsh.rc}
          '';

          "zsh/env.zsh".text = ''
            # WARNING: Content autogenerated, edits can be overwritten!
            ${config.my.zsh.env};
          '';
        };
      }

      (mkIf config.modules.shell.zsh.antigen.enable {
        # Antigen
        env.ADOTDIR = "$XDG_CONFIG_HOME/antigen";
        env.ANTIGEN_CACHE = "$XDG_CACHE_HOME/antigen";
        env.ANTIGEN_DEBUG_LOG = "/dev/null";

        home.xdg.configFile."zsh/custom/plugins/antigen" = {
          source = pkgs.fetchFromGitHub {
            owner = "zsh-users";
            repo = "antigen";
            rev = "v2.2.3";
            sha256 = "1hqnwdskdmaiyi1p63gg66hbxi1igxib6ql8db3w950kjs1cs7rq";
          };
        };
      })

      (mkIf config.modules.shell.zsh.ohMyZsh.enable {
        # Oh-my-zsh
        env.ZSH = "$XDG_CONFIG_HOME/oh-my-zsh";
        env.ZSH_CUSTOM = "$XDG_CONFIG_HOME/oh-my-zsh/custom";

        home.xdg.configFile."oh-my-zsh" = {
          source = pkgs.fetchFromGitHub {
            owner = "ohmyzsh";
            repo = "ohmyzsh";
            rev = "079e7bb5e0a79171f3356d55d3f6302a82645a39";
            sha256 = "10fpq57alk117991wwbprcmv69f27hbpp7a3gb70mzyjmfiflgk3";
          };
        };
      })
    ];

    programs.zsh = {
      enable = true;
      enableCompletion = true;

      histSize = config.modules.shell.zsh.historySize;
    };
  };
}
